/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package id.co.meda.apit.visual.form;

import id.co.meda.apit.enggine.penilaian.model.LspopNonStandar;
import id.co.meda.apit.enggine.penilaian.model.Spop;
import id.co.meda.apit.visual.controller.ControlEditLspopNonStd;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.Arrays;
import java.util.EventObject;
import java.util.List;
import javax.swing.ButtonModel;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.event.CellEditorListener;
import javax.swing.event.ChangeEvent;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;

/** 
 *
 * @author PT. Data Bumi Indonesia
 */
public class FrmEditLspopNonStd extends javax.swing.JDialog {

    private String op_khusus = "";
    /**
     * Creates new form FrmSpop
     */
    public FrmEditLspopNonStd(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        inisiasiAwal();
    }
    
    public FrmEditLspopNonStd(java.awt.Frame parent, boolean modal, String op_khusus) {
        super(parent, modal);
        this.op_khusus = op_khusus;
        initComponents();
        inisiasiAwal();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblEditLspop = new javax.swing.JTable();
        btTambah = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtNop = new javax.swing.JFormattedTextField();
        jLabel2 = new javax.swing.JLabel();
        lbNmWp = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lbJmlBng = new javax.swing.JLabel();
        btnCtkLspop = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Edit Data LSPOP Non Standar");
        setResizable(false);

        tblEditLspop.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblEditLspop.setRowSelectionAllowed(false);
        jScrollPane1.setViewportView(tblEditLspop);

        btTambah.setMnemonic('T');
        btTambah.setText("Tambah Data");
        btTambah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btTambahActionPerformed(evt);
            }
        });

        jLabel1.setText("NOP");

        try {
            txtNop.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##.##.###.###.###-####.#")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtNop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNopActionPerformed(evt);
            }
        });
        txtNop.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtNopKeyPressed(evt);
            }
        });

        jLabel2.setText("Nama WP");

        lbNmWp.setBackground(new java.awt.Color(255, 255, 255));
        lbNmWp.setForeground(new java.awt.Color(255, 0, 0));
        lbNmWp.setText("-");

        jLabel3.setText("Jumlah Bangunan");

        lbJmlBng.setForeground(new java.awt.Color(255, 0, 0));
        lbJmlBng.setText("-");

        btnCtkLspop.setText("Cetak Lsop Per Nop");
        btnCtkLspop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCtkLspopActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 565, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtNop, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbNmWp, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(lbJmlBng, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnCtkLspop)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btTambah, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtNop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(lbNmWp))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(lbJmlBng)
                    .addComponent(btTambah)
                    .addComponent(btnCtkLspop))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btTambahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btTambahActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        FrmLspopNonStd lspop = new FrmLspopNonStd(new JFrame(),true,nop);
        lspop.setVisible(true);
        //Handle untuk ikan
        if(this.op_khusus.equalsIgnoreCase("Ikan"))
        {
            lspop.addWindowListener( new WindowAdapter() {
                        @Override
                        public void windowClosed(WindowEvent we) {
                            FrmEditLspopNonStd editLspop = new FrmEditLspopNonStd(new JFrame(), true,"Ikan");
                            editLspop.setVisible(true);
                        }
             } );

        }else if(this.op_khusus.equalsIgnoreCase("Bandara"))
        {
            lspop.addWindowListener( new WindowAdapter() {
                        @Override
                        public void windowClosed(WindowEvent we) {
                            FrmEditLspopNonStd editLspop = new FrmEditLspopNonStd(new JFrame(), true,"Bandara");
                            editLspop.setVisible(true);
                        }
             } );

        }else
        {
             lspop.addWindowListener( new WindowAdapter() {
                        @Override
                        public void windowClosed(WindowEvent we) {
                            FrmEditLspopNonStd editLspop = new FrmEditLspopNonStd(new JFrame(), true);
                            editLspop.setVisible(true);
                        }
             } );
        }
    }//GEN-LAST:event_btTambahActionPerformed

    private void txtNopKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNopKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode()==KeyEvent.VK_ENTER) {
            nop = txtNop.getText().replace(".","").replace("-","");
            cariNop();
            //isiGrid(1);
        }

    }//GEN-LAST:event_txtNopKeyPressed

    private void txtNopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNopActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNopActionPerformed

    private void btnCtkLspopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCtkLspopActionPerformed
        // TODO add your handling code here:
         ctrlEditLspop.cetakLspop(nop);
    }//GEN-LAST:event_btnCtkLspopActionPerformed


    private void inisiasiAwal() {
        btTambah.setEnabled(false);
        this.btnCtkLspop.setEnabled(false);
        isiGrid(0);
    }
    
    private void cariNop() {
        spop = new Spop();
        
        //khusus handle ikan
        if(this.op_khusus.equalsIgnoreCase("Ikan"))
        {
        ctrlEditLspop.cariNopIkan(nop,spop);
        }else if(this.op_khusus.equalsIgnoreCase("Bandara"))
        {
           
        ctrlEditLspop.cariNopBandara(nop,spop);
        }else
        {
        ctrlEditLspop.cariNop(nop, spop);
        }
        
        if (spop.getNop()!=null) {
           lbNmWp.setText(spop.getNamaWp());
           lbJmlBng.setText(spop.getJumlahBangunan().toString());
           btTambah.setEnabled(true);
           this.btnCtkLspop.setEnabled(true);
           isiGrid(1);
        } else {
            JOptionPane.showMessageDialog(this, "NOP tidak ditemukan !!!");
            btTambah.setEnabled(false);
            this.btnCtkLspop.setEnabled(false);
            txtNop.setText("");
            lbNmWp.setText("-");
            lbJmlBng.setText("-");
        }
        
        
    }
    
    private void isiGrid(int kode) {
        if (kode==0) {
            tblEditLspop.setModel(ctrlEditLspop.getTableModel());
        } else {
            tblEditLspop.setModel(ctrlEditLspop.getTableModel(nop));
        }
        tblEditLspop.getColumnModel().getColumn(0).setPreferredWidth(5);        
        tblEditLspop.getColumnModel().getColumn(1).setPreferredWidth(150);        
        tblEditLspop.getColumnModel().getColumn(2).setPreferredWidth(50);        
        tblEditLspop.setRowHeight(35);
        
        TableColumn column = tblEditLspop.getColumnModel().getColumn(3);
        column.setCellRenderer(new ButtonsRenderer());
        column.setCellEditor(new ButtonsEditor(tblEditLspop));
    }

class ButtonsPanel extends JPanel {
    public final List<JButton> buttons = Arrays.asList(new JButton("Edit"));
    public ButtonsPanel() {
        super();
        setOpaque(false);
        for(JButton b: buttons) {
            b.setFocusable(false);
            b.setRolloverEnabled(false);
            add(b);
        }
    }
//     @Override public void updateUI() {
//         super.updateUI();
//     }
}
    
class ButtonsRenderer extends ButtonsPanel implements TableCellRenderer {
    public ButtonsRenderer() {
        super();
        setName("Table.cellRenderer");
    }
    @Override public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
        this.setBackground(isSelected?table.getSelectionBackground():table.getBackground());
        return this;
    }
}
class ButtonsEditor extends ButtonsPanel implements TableCellEditor {
    transient protected ChangeEvent changeEvent = null;

    public ButtonsEditor(final JTable table) {
        super();
        //---->
        //DEBUG: view button click -> control key down + edit button(same cell) press -> remain selection color
        MouseListener ml = new MouseAdapter() {
            @Override public void mousePressed(MouseEvent e) {
                ButtonModel m = ((JButton)e.getSource()).getModel();
                if(m.isPressed() && table.isRowSelected(table.getEditingRow()) && e.isControlDown()) {
                    setBackground(table.getBackground());
                }
            }
        };
        buttons.get(0).addMouseListener(ml);
        //<----

        buttons.get(0).addActionListener(new ActionListener() {
            @Override public void actionPerformed(ActionEvent e) {
                int row = table.convertRowIndexToModel(table.getEditingRow());
                Object o = table.getModel().getValueAt(row, 0);
                //manggil Spop sesuai Nop yang dipilih dan kode editnya (ingat: 1 edit, 2 hapus)
                callLspop(o,1);
                fireEditingStopped();
            }

        });

        addMouseListener(new MouseAdapter() {
            @Override public void mousePressed(MouseEvent e) {
                fireEditingStopped();
            }
        });
    }
    @Override public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
        this.setBackground(table.getSelectionBackground());
        return this;
    }
    @Override public Object getCellEditorValue() {
        return "";
    }

    //Copid from AbstractCellEditor
    //protected EventListenerList listenerList = new EventListenerList();
    //transient protected ChangeEvent changeEvent = null;
    @Override public boolean isCellEditable(EventObject e) {
        return true;
    }
    @Override public boolean shouldSelectCell(EventObject anEvent) {
        return true;
    }
    @Override public boolean stopCellEditing() {
        fireEditingStopped();
        return true;
    }
    @Override public void cancelCellEditing() {
        fireEditingCanceled();
    }
    @Override public void addCellEditorListener(CellEditorListener l) {
        listenerList.add(CellEditorListener.class, l);
    }
    @Override public void removeCellEditorListener(CellEditorListener l) {
        listenerList.remove(CellEditorListener.class, l);
    }
    public CellEditorListener[] getCellEditorListeners() {
        return listenerList.getListeners(CellEditorListener.class);
    }
    protected void fireEditingStopped() {
        // Guaranteed to return a non-null array
        Object[] listeners = listenerList.getListenerList();
        // Process the listeners last to first, notifying
        // those that are interested in this event
        for(int i = listeners.length-2; i>=0; i-=2) {
            if(listeners[i]==CellEditorListener.class) {
                // Lazily create the event:
                if(changeEvent == null) {
                    changeEvent = new ChangeEvent(this);
                }
                ((CellEditorListener)listeners[i+1]).editingStopped(changeEvent);
            }
        }
    }
    protected void fireEditingCanceled() {
        // Guaranteed to return a non-null array
        Object[] listeners = listenerList.getListenerList();
        // Process the listeners last to first, notifying
        // those that are interested in this event
        for(int i = listeners.length-2; i>=0; i-=2) {
            if(listeners[i]==CellEditorListener.class) {
                // Lazily create the event:
                if(changeEvent == null) {
                    changeEvent = new ChangeEvent(this);
                }
                ((CellEditorListener)listeners[i+1]).editingCanceled(changeEvent);
            }
        }
    }
}    

//fungsi utk memanggil Spop khusus utk edit atau hapus
private void callLspop(Object o, Integer kdEdit) {
    FrmLspopNonStd lspop = new FrmLspopNonStd(new JFrame(), true, nop, kdEdit, o.toString());
    this.setVisible(false);
    lspop.setVisible(true);
    
    //Handle untuk ikan
        if(this.op_khusus.equalsIgnoreCase("Ikan"))
        {
            lspop.addWindowListener( new WindowAdapter() {
                        @Override
                        public void windowClosed(WindowEvent we) {
                            FrmEditLspopNonStd editLspop = new FrmEditLspopNonStd(new JFrame(), true,"Ikan");
                            editLspop.setVisible(true);
                        }
             } );

        }else if(this.op_khusus.equalsIgnoreCase("Bandara"))
        {
            lspop.addWindowListener( new WindowAdapter() {
                        @Override
                        public void windowClosed(WindowEvent we) {
                            FrmEditLspopNonStd editLspop = new FrmEditLspopNonStd(new JFrame(), true,"Bandara");
                            editLspop.setVisible(true);
                        }
             } );

        }else
        {
             lspop.addWindowListener( new WindowAdapter() {
                        @Override
                        public void windowClosed(WindowEvent we) {
                            FrmEditLspopNonStd editLspop = new FrmEditLspopNonStd(new JFrame(), true);
                            editLspop.setVisible(true);
                        }
             } );
        }
}


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btTambah;
    private javax.swing.JButton btnCtkLspop;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbJmlBng;
    private javax.swing.JLabel lbNmWp;
    private javax.swing.JTable tblEditLspop;
    private javax.swing.JFormattedTextField txtNop;
    // End of variables declaration//GEN-END:variables
    final ControlEditLspopNonStd ctrlEditLspop = new ControlEditLspopNonStd();
    Spop spop;
    LspopNonStandar lSpop;
    String nop;

}
