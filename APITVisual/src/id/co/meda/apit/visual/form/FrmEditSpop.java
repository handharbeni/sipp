/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package id.co.meda.apit.visual.form;

import id.co.meda.apit.visual.controller.ControlEditSpop;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.Arrays;
import java.util.EventObject;
import java.util.List;
import javax.swing.ButtonModel;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.RowFilter;
import javax.swing.event.CellEditorListener;
import javax.swing.event.ChangeEvent;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/** 
 *
 * @author PT. Data Bumi Indonesia
 */
public class FrmEditSpop extends javax.swing.JDialog {

    /**
     * Creates new form FrmSpop
     */
    public FrmEditSpop(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.statPenilKhusus=false;
        this.nmPenilaian="";
        inisiasiAwal();
    }
    
    public FrmEditSpop(java.awt.Frame parent, boolean modal, boolean statPenilKhusus, String nmPenilaian) {
        super(parent, modal);
        initComponents();
        this.statPenilKhusus=statPenilKhusus;
        this.nmPenilaian=nmPenilaian;
        inisiasiAwal();
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblEditPengguna = new javax.swing.JTable();
        btTambah = new javax.swing.JButton();
        cariField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Edit Data SPOP");
        setResizable(false);

        tblEditPengguna.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblEditPengguna.setRowSelectionAllowed(false);
        jScrollPane1.setViewportView(tblEditPengguna);

        btTambah.setMnemonic('T');
        btTambah.setText("Tambah Data");
        btTambah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btTambahActionPerformed(evt);
            }
        });

        jLabel1.setText("Cari SPOP dengan NOP/Nama WP");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(cariField, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btTambah, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 565, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btTambah)
                    .addComponent(cariField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btTambahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btTambahActionPerformed
        // TODO add your handling code here:
        FrmSpop spop;
        if (statPenilKhusus) {
            if(nmPenilaian.equalsIgnoreCase("Ikan"))
            {
                FrmSpopBumiPerikanan spopIkan = new FrmSpopBumiPerikanan(new JFrame(),true,false);
                this.setVisible(false);
                this.dispose();
                spopIkan.setVisible(true);
                spopIkan.addWindowListener( new WindowAdapter() {
                    @Override
                    public void windowClosed(WindowEvent we) {
                        FrmEditSpop editSpop = new FrmEditSpop(new JFrame(), true,true,"Ikan");
                         editSpop.setVisible(true);
                    }
                } );
            }else if(nmPenilaian.equalsIgnoreCase("Tower"))
            {
                spop = new FrmSpop(new JFrame(),true,statPenilKhusus,nmPenilaian);
                this.setVisible(false);
                spop.setVisible(true);
                spop.addWindowListener( new WindowAdapter() {
                    @Override
                    public void windowClosed(WindowEvent we) {
                        FrmEditSpop editSpop = new FrmEditSpop(new JFrame(), true,true,"Tower");
                         editSpop.setVisible(true);
                    }
                } );
            }else if(nmPenilaian.equalsIgnoreCase("Bandara"))
            {
                FrmLkokTanahBandara lkok = new FrmLkokTanahBandara(new JFrame(),true,false,"");
                this.setVisible(false);
                lkok.setVisible(true);
                lkok.addWindowListener( new WindowAdapter() {
                    @Override
                    public void windowClosed(WindowEvent we) {
                        FrmEditSpop editSpop = new FrmEditSpop(new JFrame(), true,true,"Bandara");
                        editSpop.setVisible(true);
                    }
                } );
            }else if(nmPenilaian.equalsIgnoreCase("Pelabuhan"))
            {
                FrmSpopPelabuhan spopPelabuhan = new FrmSpopPelabuhan(new JFrame(),true);
                this.setVisible(false);
                spopPelabuhan.setVisible(true);
                spopPelabuhan.addWindowListener( new WindowAdapter() {
                    @Override
                    public void windowClosed(WindowEvent we) {
                        FrmEditSpop editSpop = new FrmEditSpop(new JFrame(), true,true,"Pelabuhan");
                        editSpop.setVisible(true);
                    }
                } );
            }
            
        } else {
           spop = new FrmSpop(new JFrame(),true);
           this.setVisible(false);
           spop.setVisible(true);
           spop.addWindowListener( new WindowAdapter() {
                    @Override
                    public void windowClosed(WindowEvent we) {
                        FrmEditSpop editSpop = new FrmEditSpop(new JFrame(), true);
                         editSpop.setVisible(true);
                    }
                } );
        }
    
    }//GEN-LAST:event_btTambahActionPerformed


    private void inisiasiAwal() {
        
        this.inisiasiTable();
        
    }
    
    private void inisiasiTable()
    {
        tblEditPengguna.setModel(ctrlEditSpop.getTableModel(statPenilKhusus,nmPenilaian));
        tblEditPengguna.getColumnModel().getColumn(0).setPreferredWidth(120);
        tblEditPengguna.getColumnModel().getColumn(1).setPreferredWidth(200);
        tblEditPengguna.getColumnModel().getColumn(2).setPreferredWidth(15);        
        tblEditPengguna.setRowHeight(35);
        TableColumn column = tblEditPengguna.getColumnModel().getColumn(2);
        column.setCellRenderer(new ButtonsRenderer());
        column.setCellEditor(new ButtonsEditor(tblEditPengguna));
        
        this.rowSorter = new TableRowSorter<TableModel>(tblEditPengguna.getModel());
        tblEditPengguna.setRowSorter(rowSorter);
        this.cariField.getDocument().addDocumentListener(new DocumentListener(){

            @Override
            public void insertUpdate(DocumentEvent e) {
                String text = cariField.getText();
                
                if(text.trim().length() == 0)
                {
                    rowSorter.setRowFilter(null);
                }else
                {
                     rowSorter.setRowFilter(RowFilter.regexFilter("(?i)"+text));
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                 String text = cariField.getText();
                
                if(text.trim().length() == 0)
                {
                    rowSorter.setRowFilter(null);
                }else
                {
                     rowSorter.setRowFilter(RowFilter.regexFilter("(?i)"+text));
                }
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                 String text = cariField.getText();
                
                if(text.trim().length() == 0)
                {
                    rowSorter.setRowFilter(null);
                }else
                {
                     rowSorter.setRowFilter(RowFilter.regexFilter("(?i)"+text));
                }
            }
        
            
        
        });
        
      
        
    }

class ButtonsPanel extends JPanel {
    public final List<JButton> buttons = Arrays.asList(new JButton("Edit"));
    public ButtonsPanel() {
        super();
        setOpaque(false);
        for(JButton b: buttons) {
            b.setFocusable(false);
            b.setRolloverEnabled(false);
            add(b);
        }
    }
//     @Override public void updateUI() {
//         super.updateUI();
//     }
}
    
class ButtonsRenderer extends ButtonsPanel implements TableCellRenderer {
    public ButtonsRenderer() {
        super();
        setName("Table.cellRenderer");
    }
    @Override public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
        this.setBackground(isSelected?table.getSelectionBackground():table.getBackground());
        return this;
    }
}
class ButtonsEditor extends ButtonsPanel implements TableCellEditor {
    transient protected ChangeEvent changeEvent = null;

    public ButtonsEditor(final JTable table) {
        super();
        //---->
        //DEBUG: view button click -> control key down + edit button(same cell) press -> remain selection color
        MouseListener ml = new MouseAdapter() {
            @Override public void mousePressed(MouseEvent e) {
                ButtonModel m = ((JButton)e.getSource()).getModel();
                if(m.isPressed() && table.isRowSelected(table.getEditingRow()) && e.isControlDown()) {
                    setBackground(table.getBackground());
                }
            }
        };
        buttons.get(0).addMouseListener(ml);
        //<----

        buttons.get(0).addActionListener(new ActionListener() {
            @Override public void actionPerformed(ActionEvent e) {
                int row = table.convertRowIndexToModel(table.getEditingRow());
                Object o = table.getModel().getValueAt(row, 0);
                //manggil Spop sesuai Nop yang dipilih dan kode editnya (ingat: 1 edit, 2 hapus)
                callSpop(o,1);
                fireEditingStopped();
            }

        });

        addMouseListener(new MouseAdapter() {
            @Override public void mousePressed(MouseEvent e) {
                fireEditingStopped();
            }
        });
    }
    @Override public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
        this.setBackground(table.getSelectionBackground());
        return this;
    }
    @Override public Object getCellEditorValue() {
        return "";
    }

    //Copid from AbstractCellEditor
    //protected EventListenerList listenerList = new EventListenerList();
    //transient protected ChangeEvent changeEvent = null;
    @Override public boolean isCellEditable(EventObject e) {
        return true;
    }
    @Override public boolean shouldSelectCell(EventObject anEvent) {
        return true;
    }
    @Override public boolean stopCellEditing() {
        fireEditingStopped();
        return true;
    }
    @Override public void cancelCellEditing() {
        fireEditingCanceled();
    }
    @Override public void addCellEditorListener(CellEditorListener l) {
        listenerList.add(CellEditorListener.class, l);
    }
    @Override public void removeCellEditorListener(CellEditorListener l) {
        listenerList.remove(CellEditorListener.class, l);
    }
    public CellEditorListener[] getCellEditorListeners() {
        return listenerList.getListeners(CellEditorListener.class);
    }
    protected void fireEditingStopped() {
        // Guaranteed to return a non-null array
        Object[] listeners = listenerList.getListenerList();
        // Process the listeners last to first, notifying
        // those that are interested in this event
        for(int i = listeners.length-2; i>=0; i-=2) {
            if(listeners[i]==CellEditorListener.class) {
                // Lazily create the event:
                if(changeEvent == null) {
                    changeEvent = new ChangeEvent(this);
                }
                ((CellEditorListener)listeners[i+1]).editingStopped(changeEvent);
            }
        }
    }
    protected void fireEditingCanceled() {
        // Guaranteed to return a non-null array
        Object[] listeners = listenerList.getListenerList();
        // Process the listeners last to first, notifying
        // those that are interested in this event
        for(int i = listeners.length-2; i>=0; i-=2) {
            if(listeners[i]==CellEditorListener.class) {
                // Lazily create the event:
                if(changeEvent == null) {
                    changeEvent = new ChangeEvent(this);
                }
                ((CellEditorListener)listeners[i+1]).editingCanceled(changeEvent);
            }
        }
    }
}    

//fungsi utk memanggil Spop khusus utk edit atau hapus
private void callSpop(Object o, Integer kdEdit) {
    FrmSpop spop;
    if (statPenilKhusus) {
        if(nmPenilaian.equalsIgnoreCase("Ikan"))
        {
             FrmSpopBumiPerikanan spopIkan = new FrmSpopBumiPerikanan(new JFrame(),true,false);
             this.setVisible(false);
             spopIkan.editMode(o.toString());
             
             spopIkan.setVisible(true);
             spopIkan.addWindowListener( new WindowAdapter() {
                    @Override
                    public void windowClosed(WindowEvent we) {
                        FrmEditSpop editSpop = new FrmEditSpop(new JFrame(), true,true,"Ikan");
                         editSpop.setVisible(true);
                    }
                } );
        }else if(nmPenilaian.equalsIgnoreCase("Tower"))
        {
            spop = new FrmSpop(new JFrame(),true,kdEdit,o.toString(), statPenilKhusus,nmPenilaian);
            this.setVisible(false);
            spop.setVisible(true);
        }else if(nmPenilaian.equalsIgnoreCase("Bandara"))
        {
            FrmLkokTanahBandara lkok = new FrmLkokTanahBandara(new JFrame(), true,true,o.toString());
            this.setVisible(false);
            lkok.setVisible(true);
            lkok.addWindowListener( new WindowAdapter() {
                    @Override
                    public void windowClosed(WindowEvent we) {
                        FrmEditSpop editSpop = new FrmEditSpop(new JFrame(), true,true,"Bandara");
                        editSpop.setVisible(true);
                    }
                } );
        }else if(nmPenilaian.equalsIgnoreCase("Pelabuhan"))
        {
            FrmSpopPelabuhan spopPelabuhan = new FrmSpopPelabuhan(new JFrame(),true);
            this.setVisible(false);
            spopPelabuhan.setVisible(true);
            spopPelabuhan.addWindowListener( new WindowAdapter() {
                    @Override
                    public void windowClosed(WindowEvent we) {
                        FrmEditSpop editSpop = new FrmEditSpop(new JFrame(), true,true,"Pelabuhan");
                        editSpop.setVisible(true);
                    }
                } );
        }
    } else {
        spop = new FrmSpop(new JFrame(),true,kdEdit,o.toString());
        this.setVisible(false);
        spop.setVisible(true);
    }
   
}






    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btTambah;
    private javax.swing.JTextField cariField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblEditPengguna;
    // End of variables declaration//GEN-END:variables
    final ControlEditSpop ctrlEditSpop = new ControlEditSpop();
    private boolean statPenilKhusus;
    private String nmPenilaian;
    private TableRowSorter<TableModel> rowSorter; 

}
